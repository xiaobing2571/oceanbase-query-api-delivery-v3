# Spring Boot application properties
server.port=8080

# Logging
logging.level.com.oceanbase.query.api=INFO
# Enable for seeing JDBC operations if needed
logging.level.org.springframework.jdbc.core=DEBUG
# Enable for seeing Hibernate SQL
logging.level.org.hibernate.SQL=DEBUG
# Enable for seeing Hibernate SQL parameters
logging.level.org.hibernate.type.descriptor.sql=TRACE
logging.file.name=logs/oceanbase-query-api.log
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# OpenAPI / Swagger
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha

# Metadata Datasource Configuration (using OceanBase/MySQL compatible for storing SQL templates, scenes, etc.)
# Replace with your actual metadata database connection details
spring.datasource.url=jdbc:mysql://your-metadata-ob-host:2881/metadata_db_name?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=your_metadata_user
spring.datasource.password=your_metadata_password
# For OceanBase, you can use com.mysql.cj.jdbc.Driver or com.oceanbase.jdbc.Driver
# Ensure the appropriate JDBC driver is in your classpath (mysql-connector-j is included by default with Spring Boot for MySQL)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# HikariCP properties for the metadata datasource pool
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.poolName=MetadataHikariPool
spring.datasource.hikari.auto-commit=true

# JPA Configuration (for metadata persistence)
# Use 'validate' in production after initial schema setup. 'update' can be risky.
# Consider using Flyway or Liquibase for schema migrations in production.
spring.jpa.hibernate.ddl-auto=update 
# Set to false in production for better performance and cleaner logs
spring.jpa.show-sql=true
# For OceanBase MySQL mode, MySQL8Dialect is generally suitable.
# If using a specific OceanBase dialect for Hibernate, ensure it's available and configured.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# Recommended to be false to avoid N+1 query issues and long-lived sessions
spring.jpa.open-in-view=false

# Jackson ObjectMapper configuration (can be configured via AppConfig.java as well)
# Don't serialize null fields
spring.jackson.default-property-inclusion=non_null
# Ignore unknown properties during deserialization
spring.jackson.deserialization.fail-on-unknown-properties=false
